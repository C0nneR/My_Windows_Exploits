#include <stdio.h>
#include <tchar.h>
#include <Windows.h>
#include <TlHelp32.h>

DWORD GetProcessPID(const _TCHAR* pszProcessName) {
	DWORD dwPid = 0;
	PROCESSENTRY32 pe32 = { 0 };
	pe32.dwSize = sizeof(PROCESSENTRY32);

	HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (INVALID_HANDLE_VALUE == hProcessSnap) {
		printf("CreateToolhelp32Snapshot failed.\n");
		return FALSE;
	}

	BOOL bRet = Process32First(hProcessSnap, &pe32);
	while (bRet) {
		if (!lstrcmpiW(pszProcessName, pe32.szExeFile))
		{
			dwPid = pe32.th32ProcessID;
			break;
		}
		bRet = Process32Next(hProcessSnap, &pe32);
	}

	CloseHandle(hProcessSnap);
	return dwPid;
}

BOOL EnumerateProcessModule(DWORD dwPid) {
	MODULEENTRY32 me32 = { 0 };
	me32.dwSize = sizeof(MODULEENTRY32);

	HANDLE hModuleSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, dwPid);
	if (INVALID_HANDLE_VALUE == hModuleSnap) {
		printf("CreateToolhelp32Snapshot failed with error code %d.\n", GetLastError());
		return FALSE;
	}

	BOOL bRet = Module32First(hModuleSnap, &me32);
	if (bRet) {
		printf("Base\t\t\tName\n");
	}
	while (bRet) {
		printf("0x%p\t", me32.modBaseAddr);
		wprintf(_T("%s\n"), me32.szModule);
		bRet = Module32Next(hModuleSnap, &me32);
	}

	CloseHandle(hModuleSnap);
	return TRUE;
}

int main() {
	DWORD dwRet = GetProcessPID(_T("explorer.exe"));
	if (dwRet) {
		printf("PID: %d.\n", dwRet);
	}
	else {
		printf("GetProcessPID failed.\n");
		return 1;
	}

	if (FALSE == EnumerateProcessModule(dwRet)) {
		printf("EnumerateProcessModule failed.\n");
	}
	else {
		printf("EnumerateProcessModule succeeded.\n");
	}

	system("pause");
	return 0;
}